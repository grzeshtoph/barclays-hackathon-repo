/**
 * Barclays 2022 CBDC Hackathon API
 * API for the Barclays 2022 CBDC Hackathon.  Please ensure you include your API key in the `x-api-key` header for your requests.
 *
 * OpenAPI spec version: 0.0.9
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { BadRequestResponse } from '../model/badRequestResponse';
import { CreatePaymentInterfaceProviderRequestBody } from '../model/createPaymentInterfaceProviderRequestBody';
import { CreatePaymentInterfaceProviderResponseBody } from '../model/createPaymentInterfaceProviderResponseBody';
import { ErrorResponseBody } from '../model/errorResponseBody';
import { GetBankingEntityAccountResponseBody } from '../model/getBankingEntityAccountResponseBody';
import { GetBankingEntityAccountsPageResponseBody } from '../model/getBankingEntityAccountsPageResponseBody';
import { GetPIPDetailsPageResponseBody } from '../model/getPIPDetailsPageResponseBody';
import { GetPIPDetailsResponseBody } from '../model/getPIPDetailsResponseBody';
import { GetPartyResponseBody } from '../model/getPartyResponseBody';
import { GetPartyViewsPageResponseBody } from '../model/getPartyViewsPageResponseBody';
import { MakeDepositRequestBody } from '../model/makeDepositRequestBody';
import { MakeWithdrawalRequestBody } from '../model/makeWithdrawalRequestBody';
import { NotFoundResponse } from '../model/notFoundResponse';
import { OpenAccountRequestBody } from '../model/openAccountRequestBody';
import { OpenAccountResponseBody } from '../model/openAccountResponseBody';
import { RegisterPartyRequestBody } from '../model/registerPartyRequestBody';
import { RegisterPartyResponseBody } from '../model/registerPartyResponseBody';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class PaymentInterfaceProvidersPIPsService {
  protected basePath = 'https://cbdchackathon-dev.barclays.nayaone.com/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Close the account at the PIP.
   * Close the account. Note: the account must have a 0 balance for this API call to succeed.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public closePipAccount(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public closePipAccount(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public closePipAccount(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public closePipAccount(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling closePipAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling closePipAccount.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling closePipAccount.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling closePipAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'delete',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/accounts/${encodeURIComponent(String(accountId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Create a new PIP.
   * Create a new PIP which will have access to the CBDC ledger for the given currency. Once created, you can register parties with the PIP and also open up accounts. An account at a PIP is a proxy for an account on the CBDC ledger.
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createNewPip(
    body: CreatePaymentInterfaceProviderRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<CreatePaymentInterfaceProviderResponseBody>;
  public createNewPip(
    body: CreatePaymentInterfaceProviderRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<CreatePaymentInterfaceProviderResponseBody>>;
  public createNewPip(
    body: CreatePaymentInterfaceProviderRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<CreatePaymentInterfaceProviderResponseBody>>;
  public createNewPip(
    body: CreatePaymentInterfaceProviderRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createNewPip.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling createNewPip.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling createNewPip.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<CreatePaymentInterfaceProviderResponseBody>('post', `${this.basePath}/pips`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Register a party with the PIP.
   * Register a party with the PIP.  It is the PIP which holds the personally identifiable data of the party and which interacts with the CBDC core ledger on behalf of the party.   Once registered you can then open accounts belonging to that party. In the real world the registration would also include performing KYC and AML checks.
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createNewPipParty(
    body: RegisterPartyRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<RegisterPartyResponseBody>;
  public createNewPipParty(
    body: RegisterPartyRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<RegisterPartyResponseBody>>;
  public createNewPipParty(
    body: RegisterPartyRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<RegisterPartyResponseBody>>;
  public createNewPipParty(
    body: RegisterPartyRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createNewPipParty.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling createNewPipParty.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling createNewPipParty.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling createNewPipParty.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<RegisterPartyResponseBody>(
      'post',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/parties`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Deposit a cash amount into the account.
   * Simulation of depositing cash into the account.  &lt;h2&gt; Amount details &lt;/h2&gt;  The amount must be given in the units of the currency (for GBP that means pence, for  USD/EUR: cents, etc.).  For example if you wanted £1/$1/€1 to be the amount you would give the value 100 (as the value refers to the amount of pence/cents).
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public depositIntoPipAccount(
    body: MakeDepositRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public depositIntoPipAccount(
    body: MakeDepositRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public depositIntoPipAccount(
    body: MakeDepositRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public depositIntoPipAccount(
    body: MakeDepositRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling depositIntoPipAccount.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling depositIntoPipAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling depositIntoPipAccount.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling depositIntoPipAccount.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling depositIntoPipAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'post',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/accounts/${encodeURIComponent(String(accountId))}/deposit`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * De-register a specific party from a PIP.
   * De-register a specific party from a PIP.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param partyId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deregisterPipParty(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    partyId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPartyResponseBody>;
  public deregisterPipParty(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    partyId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPartyResponseBody>>;
  public deregisterPipParty(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    partyId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPartyResponseBody>>;
  public deregisterPipParty(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    partyId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling deregisterPipParty.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling deregisterPipParty.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling deregisterPipParty.');
    }

    if (partyId === null || partyId === undefined) {
      throw new Error('Required parameter partyId was null or undefined when calling deregisterPipParty.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPartyResponseBody>(
      'delete',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/parties/${encodeURIComponent(String(partyId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get details of a specific account at the PIP.
   * Get details of a specific account at the PIP.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPipAccount(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public getPipAccount(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public getPipAccount(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public getPipAccount(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getPipAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getPipAccount.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling getPipAccount.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling getPipAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'get',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/accounts/${encodeURIComponent(String(accountId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get details of all of the accounts at the PIP.
   * Get details of all of the accounts at the PIP.    &lt;h2&gt; Balance details &lt;/h2&gt;  The &#x60;balance&#x60; is given in the units of the currency (for GBP that means pence, for  USD/EUR: cents, etc.).  For your convenience there is also a field, &#x60;formattedBalance&#x60; which displays the balance as a decimal number.  For example if you had £1.03 in the account you would receive a &#x60;balance&#x60; of 103 and a &#x60;formattedBalance&#x60; of £1.03.  &lt;h2&gt; Paging &lt;/h2&gt;  This endpoint can potentially return quite a large result and so you must use paging to control the size of the response.  Pagination is handled by using the &#x60;pageIndex&#x60; and &#x60;pageSize&#x60; parameters.  - The &#x60;pageIndex&#x60; refers to the index of the page of data you want returned. It is 0-indexed meaning the first page will always have the &#x60;pageIndex&#x60; value of 0.  - The &#x60;pageSize&#x60; refers to the maximum number of entries you would like to see within a single page (hence page size).    - You cannot request a &#x60;pageSize&#x60; greater than  1000.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param pageIndex Zero-based page index (0..N) of the page you want to return.
   * @param pageSize The max. number of items (size) a page will contain.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPipAccountPage(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountsPageResponseBody>;
  public getPipAccountPage(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountsPageResponseBody>>;
  public getPipAccountPage(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountsPageResponseBody>>;
  public getPipAccountPage(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    pageIndex?: number,
    pageSize?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getPipAccountPage.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getPipAccountPage.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling getPipAccountPage.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetBankingEntityAccountsPageResponseBody>(
      'get',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/accounts`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get PIP details.
   * Retrieve the details of a specific PIP.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPipDetails(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPIPDetailsResponseBody>;
  public getPipDetails(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPIPDetailsResponseBody>>;
  public getPipDetails(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPIPDetailsResponseBody>>;
  public getPipDetails(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getPipDetails.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getPipDetails.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling getPipDetails.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPIPDetailsResponseBody>('get', `${this.basePath}/pips/${encodeURIComponent(String(pipId))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Get a page listing the PIPs you have created.
   * Get a page listing the PIPs you have created.  &lt;h2&gt; Paging &lt;/h2&gt;  This endpoint can potentially return quite a large result and so you must use paging to control the size of the response.  Pagination is handled by using the &#x60;pageIndex&#x60; and &#x60;pageSize&#x60; parameters.  - The &#x60;pageIndex&#x60; refers to the index of the page of data you want returned. It is 0-indexed meaning the first page will always have the &#x60;pageIndex&#x60; value of 0.  - The &#x60;pageSize&#x60; refers to the maximum number of entries you would like to see within a single page (hence page size).    - You cannot request a &#x60;pageSize&#x60; greater than  1000.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pageIndex Zero-based page index (0..N) of the page you want to return.
   * @param pageSize The max. number of items (size) a page will contain.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPipDetailsPage(
    xEnvId: number,
    xCurrencyId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPIPDetailsPageResponseBody>;
  public getPipDetailsPage(
    xEnvId: number,
    xCurrencyId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPIPDetailsPageResponseBody>>;
  public getPipDetailsPage(
    xEnvId: number,
    xCurrencyId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPIPDetailsPageResponseBody>>;
  public getPipDetailsPage(
    xEnvId: number,
    xCurrencyId: number,
    pageIndex?: number,
    pageSize?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getPipDetailsPage.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getPipDetailsPage.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPIPDetailsPageResponseBody>('get', `${this.basePath}/pips`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Get details about a specific party registered at a PIP.
   * Returns the details about the specific party registered at the PIP.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param partyId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPipParty(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    partyId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPartyResponseBody>;
  public getPipParty(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    partyId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPartyResponseBody>>;
  public getPipParty(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    partyId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPartyResponseBody>>;
  public getPipParty(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    partyId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getPipParty.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getPipParty.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling getPipParty.');
    }

    if (partyId === null || partyId === undefined) {
      throw new Error('Required parameter partyId was null or undefined when calling getPipParty.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPartyResponseBody>(
      'get',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/parties/${encodeURIComponent(String(partyId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get details of all parties registered at the PIP.
   * Get details of all parties registered at the PIP.  &lt;h2&gt; Paging &lt;/h2&gt;  This endpoint can potentially return quite a large result and so you must use paging to control the size of the response.  Pagination is handled by using the &#x60;pageIndex&#x60; and &#x60;pageSize&#x60; parameters.  - The &#x60;pageIndex&#x60; refers to the index of the page of data you want returned. It is 0-indexed meaning the first page will always have the &#x60;pageIndex&#x60; value of 0.  - The &#x60;pageSize&#x60; refers to the maximum number of entries you would like to see within a single page (hence page size).    - You cannot request a &#x60;pageSize&#x60; greater than  1000.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param pageIndex Zero-based page index (0..N) of the page you want to return.
   * @param pageSize The max. number of items (size) a page will contain.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPipPartyPageDetails(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPartyViewsPageResponseBody>;
  public getPipPartyPageDetails(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPartyViewsPageResponseBody>>;
  public getPipPartyPageDetails(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPartyViewsPageResponseBody>>;
  public getPipPartyPageDetails(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    pageIndex?: number,
    pageSize?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getPipPartyPageDetails.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getPipPartyPageDetails.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling getPipPartyPageDetails.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPartyViewsPageResponseBody>(
      'get',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/parties`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Open a CBDC account at the PIP.
   * Opens a CBDC account in the given currency at the payment interface provider. This account is essentially a proxy for the CBDC account stored on the central bank&#x27;s core ledger. You do not need to interact directly with the core ledger - the PIP will do that behind the scenes. You need to provide a reference to the ID of the party which is opening the account in the request body.
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public openPipAccount(
    body: OpenAccountRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<OpenAccountResponseBody>;
  public openPipAccount(
    body: OpenAccountRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<OpenAccountResponseBody>>;
  public openPipAccount(
    body: OpenAccountRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<OpenAccountResponseBody>>;
  public openPipAccount(
    body: OpenAccountRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling openPipAccount.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling openPipAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling openPipAccount.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling openPipAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<OpenAccountResponseBody>('post', `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/accounts`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Terminate a PIP.
   * Terminate a PIP entity. Note: all child resources (parties/accounts) must be terminated as well otherwise this API call will fail.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public terminatePip(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPIPDetailsResponseBody>;
  public terminatePip(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPIPDetailsResponseBody>>;
  public terminatePip(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPIPDetailsResponseBody>>;
  public terminatePip(
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling terminatePip.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling terminatePip.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling terminatePip.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPIPDetailsResponseBody>('delete', `${this.basePath}/pips/${encodeURIComponent(String(pipId))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Withdraw a cash amount from the account.
   * Simulation of withdrawing money from the account.  &lt;h2&gt; Amount details &lt;/h2&gt;  The amount must be given in the units of the currency (for GBP that means pence, for  USD/EUR: cents, etc.).  For example if you wanted £1/$1/€1 to be the amount you would give the value 100 (as the value refers to the amount of pence/cents).
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pipId
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public withdrawFromPipAccount(
    body: MakeWithdrawalRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public withdrawFromPipAccount(
    body: MakeWithdrawalRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public withdrawFromPipAccount(
    body: MakeWithdrawalRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public withdrawFromPipAccount(
    body: MakeWithdrawalRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    pipId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling withdrawFromPipAccount.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling withdrawFromPipAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling withdrawFromPipAccount.');
    }

    if (pipId === null || pipId === undefined) {
      throw new Error('Required parameter pipId was null or undefined when calling withdrawFromPipAccount.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling withdrawFromPipAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'post',
      `${this.basePath}/pips/${encodeURIComponent(String(pipId))}/accounts/${encodeURIComponent(String(accountId))}/withdrawal`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
