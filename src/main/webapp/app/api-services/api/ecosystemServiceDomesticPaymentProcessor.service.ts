/**
 * Barclays 2022 CBDC Hackathon API
 * API for the Barclays 2022 CBDC Hackathon.  Please ensure you include your API key in the `x-api-key` header for your requests.
 *
 * OpenAPI spec version: 0.0.9
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { BadRequestResponse } from '../model/badRequestResponse';
import { ErrorResponseBody } from '../model/errorResponseBody';
import { GetDomesticPaymentDetailsResponseBody } from '../model/getDomesticPaymentDetailsResponseBody';
import { MakeDomesticPaymentResponseBody } from '../model/makeDomesticPaymentResponseBody';
import { NotFoundResponse } from '../model/notFoundResponse';
import { PaymentInitiationDetails } from '../model/paymentInitiationDetails';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class EcosystemServiceDomesticPaymentProcessorService {
  protected basePath = 'https://cbdchackathon-dev.barclays.nayaone.com/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Get details about a payment.
   * Retrieve the latest state of a payment.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param domesticPaymentId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public domesticPaymentEcosystemServiceGetPayment(
    xEnvId: number,
    xCurrencyId: number,
    domesticPaymentId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetDomesticPaymentDetailsResponseBody>;
  public domesticPaymentEcosystemServiceGetPayment(
    xEnvId: number,
    xCurrencyId: number,
    domesticPaymentId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetDomesticPaymentDetailsResponseBody>>;
  public domesticPaymentEcosystemServiceGetPayment(
    xEnvId: number,
    xCurrencyId: number,
    domesticPaymentId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetDomesticPaymentDetailsResponseBody>>;
  public domesticPaymentEcosystemServiceGetPayment(
    xEnvId: number,
    xCurrencyId: number,
    domesticPaymentId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling domesticPaymentEcosystemServiceGetPayment.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling domesticPaymentEcosystemServiceGetPayment.');
    }

    if (domesticPaymentId === null || domesticPaymentId === undefined) {
      throw new Error('Required parameter domesticPaymentId was null or undefined when calling domesticPaymentEcosystemServiceGetPayment.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetDomesticPaymentDetailsResponseBody>(
      'get',
      `${this.basePath}/domestic-payments/${encodeURIComponent(String(domesticPaymentId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Make a payment between two accounts.
   * Make a payment between two accounts.  &lt;h2&gt; Amount details &lt;/h2&gt;  The amount must be given in the units of the currency (for GBP that means pence, for  USD/EUR: cents, etc.).  For example if you wanted £1/$1/€1 to be the amount you would give the value 100 (as the value refers to the amount of pence/cents).
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public domesticPaymentEcosystemServiceMakePayment(
    body: PaymentInitiationDetails,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<MakeDomesticPaymentResponseBody>;
  public domesticPaymentEcosystemServiceMakePayment(
    body: PaymentInitiationDetails,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<MakeDomesticPaymentResponseBody>>;
  public domesticPaymentEcosystemServiceMakePayment(
    body: PaymentInitiationDetails,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<MakeDomesticPaymentResponseBody>>;
  public domesticPaymentEcosystemServiceMakePayment(
    body: PaymentInitiationDetails,
    xEnvId: number,
    xCurrencyId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling domesticPaymentEcosystemServiceMakePayment.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling domesticPaymentEcosystemServiceMakePayment.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling domesticPaymentEcosystemServiceMakePayment.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<MakeDomesticPaymentResponseBody>('post', `${this.basePath}/domestic-payments`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
