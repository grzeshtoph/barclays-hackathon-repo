/**
 * Barclays 2022 CBDC Hackathon API
 * API for the Barclays 2022 CBDC Hackathon.  Please ensure you include your API key in the `x-api-key` header for your requests.
 *
 * OpenAPI spec version: 0.0.9
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { BadRequestResponse } from '../model/badRequestResponse';
import { CreateCommercialBankRequestBody } from '../model/createCommercialBankRequestBody';
import { CreateCommercialBankResponseBody } from '../model/createCommercialBankResponseBody';
import { ErrorResponseBody } from '../model/errorResponseBody';
import { GetBankingEntityAccountResponseBody } from '../model/getBankingEntityAccountResponseBody';
import { GetBankingEntityAccountsPageResponseBody } from '../model/getBankingEntityAccountsPageResponseBody';
import { GetCommercialBankDetailsPageResponseBody } from '../model/getCommercialBankDetailsPageResponseBody';
import { GetCommercialBankDetailsResponseBody } from '../model/getCommercialBankDetailsResponseBody';
import { GetPartyResponseBody } from '../model/getPartyResponseBody';
import { GetPartyViewsPageResponseBody } from '../model/getPartyViewsPageResponseBody';
import { MakeDepositRequestBody } from '../model/makeDepositRequestBody';
import { MakeWithdrawalRequestBody } from '../model/makeWithdrawalRequestBody';
import { NotFoundResponse } from '../model/notFoundResponse';
import { OpenAccountRequestBody } from '../model/openAccountRequestBody';
import { OpenAccountResponseBody } from '../model/openAccountResponseBody';
import { RegisterPartyRequestBody } from '../model/registerPartyRequestBody';
import { RegisterPartyResponseBody } from '../model/registerPartyResponseBody';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class CommercialBanksService {
  protected basePath = 'https://cbdchackathon-dev.barclays.nayaone.com/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Close the commercial bank account.
   * Close the commercial bank account. Note: the account must have a 0 balance for this API call to succeed.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public closeCommercialBankAccount(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public closeCommercialBankAccount(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public closeCommercialBankAccount(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public closeCommercialBankAccount(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling closeCommercialBankAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling closeCommercialBankAccount.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling closeCommercialBankAccount.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling closeCommercialBankAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'delete',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/accounts/${encodeURIComponent(String(accountId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Create a new commercial bank entity.
   * Create a new commercial bank which will manage its own ledger of accounts in the given currency. Once created, you can register parties with the commercial bank and also open up accounts owned by a registered party.
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createNewCommercialBank(
    body: CreateCommercialBankRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<CreateCommercialBankResponseBody>;
  public createNewCommercialBank(
    body: CreateCommercialBankRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<CreateCommercialBankResponseBody>>;
  public createNewCommercialBank(
    body: CreateCommercialBankRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<CreateCommercialBankResponseBody>>;
  public createNewCommercialBank(
    body: CreateCommercialBankRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createNewCommercialBank.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling createNewCommercialBank.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling createNewCommercialBank.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<CreateCommercialBankResponseBody>('post', `${this.basePath}/commercial-banks`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Deposit a cash amount into the account.
   * Simulation of depositing cash into the account.  &lt;h2&gt; Amount details &lt;/h2&gt;  The amount must be given in the units of the currency (for GBP that means pence, for  USD/EUR: cents, etc.).  For example if you wanted £1/$1/€1 to be the amount you would give the value 100 (as the value refers to the amount of pence/cents).
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public depositIntoCommercialBankAccount(
    body: MakeDepositRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public depositIntoCommercialBankAccount(
    body: MakeDepositRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public depositIntoCommercialBankAccount(
    body: MakeDepositRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public depositIntoCommercialBankAccount(
    body: MakeDepositRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling depositIntoCommercialBankAccount.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling depositIntoCommercialBankAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling depositIntoCommercialBankAccount.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling depositIntoCommercialBankAccount.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling depositIntoCommercialBankAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'post',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/accounts/${encodeURIComponent(String(accountId))}/deposit`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * De-register a specific party from a commercial bank.
   * De-register a specific party from a commercial bank.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param partyId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deregisterCommercialBankParty(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    partyId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPartyResponseBody>;
  public deregisterCommercialBankParty(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    partyId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPartyResponseBody>>;
  public deregisterCommercialBankParty(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    partyId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPartyResponseBody>>;
  public deregisterCommercialBankParty(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    partyId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling deregisterCommercialBankParty.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling deregisterCommercialBankParty.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling deregisterCommercialBankParty.');
    }

    if (partyId === null || partyId === undefined) {
      throw new Error('Required parameter partyId was null or undefined when calling deregisterCommercialBankParty.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPartyResponseBody>(
      'delete',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/parties/${encodeURIComponent(String(partyId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get details of a specific account at the commercial bank.
   * Get details of a specific account at the commercial bank.  &lt;h2&gt; Balance details &lt;/h2&gt;  The &#x60;balance&#x60; is given in the units of the currency (for GBP that means pence, for  USD/EUR: cents, etc.).  For your convenience there is also a field, &#x60;formattedBalance&#x60; which displays the balance as a decimal number.  For example if you had £1.03 in the account you would receive a &#x60;balance&#x60; of 103 and a &#x60;formattedBalance&#x60; of £1.03.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommercialBankAccount(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public getCommercialBankAccount(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public getCommercialBankAccount(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public getCommercialBankAccount(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getCommercialBankAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getCommercialBankAccount.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling getCommercialBankAccount.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling getCommercialBankAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'get',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/accounts/${encodeURIComponent(String(accountId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get details of all of the accounts at the specific commercial bank.
   * Get details of all of the accounts at the specific commercial bank.    &lt;h2&gt; Balance details &lt;/h2&gt;  The &#x60;balance&#x60; is given in the units of the currency (for GBP that means pence, for  USD/EUR: cents, etc.).  For your convenience there is also a field, &#x60;formattedBalance&#x60; which displays the balance as a decimal number.  For example if you had £1.03 in the account you would receive a &#x60;balance&#x60; of 103 and a &#x60;formattedBalance&#x60; of £1.03.  &lt;h2&gt; Paging &lt;/h2&gt;  This endpoint can potentially return quite a large result and so you must use paging to control the size of the response.  Pagination is handled by using the &#x60;pageIndex&#x60; and &#x60;pageSize&#x60; parameters.  - The &#x60;pageIndex&#x60; refers to the index of the page of data you want returned. It is 0-indexed meaning the first page will always have the &#x60;pageIndex&#x60; value of 0.  - The &#x60;pageSize&#x60; refers to the maximum number of entries you would like to see within a single page (hence page size).    - You cannot request a &#x60;pageSize&#x60; greater than  1000.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param pageIndex Zero-based page index (0..N) of the page you want to return.
   * @param pageSize The max. number of items (size) a page will contain.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommercialBankAccountsPage(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountsPageResponseBody>;
  public getCommercialBankAccountsPage(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountsPageResponseBody>>;
  public getCommercialBankAccountsPage(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountsPageResponseBody>>;
  public getCommercialBankAccountsPage(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    pageIndex?: number,
    pageSize?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getCommercialBankAccountsPage.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getCommercialBankAccountsPage.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling getCommercialBankAccountsPage.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetBankingEntityAccountsPageResponseBody>(
      'get',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/accounts`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get commercial bank details.
   * Retrieve the details of a specific commercial bank.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommercialBankDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetCommercialBankDetailsResponseBody>;
  public getCommercialBankDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetCommercialBankDetailsResponseBody>>;
  public getCommercialBankDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetCommercialBankDetailsResponseBody>>;
  public getCommercialBankDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getCommercialBankDetails.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getCommercialBankDetails.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling getCommercialBankDetails.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetCommercialBankDetailsResponseBody>(
      'get',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get a page listing the commercial banks you have created.
   * Get a page listing the commercial banks you have created.  &lt;h2&gt; Paging &lt;/h2&gt;  This endpoint can potentially return quite a large result and so you must use paging to control the size of the response.  Pagination is handled by using the &#x60;pageIndex&#x60; and &#x60;pageSize&#x60; parameters.  - The &#x60;pageIndex&#x60; refers to the index of the page of data you want returned. It is 0-indexed meaning the first page will always have the &#x60;pageIndex&#x60; value of 0.  - The &#x60;pageSize&#x60; refers to the maximum number of entries you would like to see within a single page (hence page size).    - You cannot request a &#x60;pageSize&#x60; greater than  1000.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param pageIndex Zero-based page index (0..N) of the page you want to return.
   * @param pageSize The max. number of items (size) a page will contain.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommercialBankDetailsPage(
    xEnvId: number,
    xCurrencyId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetCommercialBankDetailsPageResponseBody>;
  public getCommercialBankDetailsPage(
    xEnvId: number,
    xCurrencyId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetCommercialBankDetailsPageResponseBody>>;
  public getCommercialBankDetailsPage(
    xEnvId: number,
    xCurrencyId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetCommercialBankDetailsPageResponseBody>>;
  public getCommercialBankDetailsPage(
    xEnvId: number,
    xCurrencyId: number,
    pageIndex?: number,
    pageSize?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getCommercialBankDetailsPage.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getCommercialBankDetailsPage.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetCommercialBankDetailsPageResponseBody>('get', `${this.basePath}/commercial-banks`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Get details about a specific party registered at a commercial bank.
   * Returns the details about the specific party registered at the commercial bank.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param partyId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommercialBankPartyDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    partyId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPartyResponseBody>;
  public getCommercialBankPartyDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    partyId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPartyResponseBody>>;
  public getCommercialBankPartyDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    partyId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPartyResponseBody>>;
  public getCommercialBankPartyDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    partyId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getCommercialBankPartyDetails.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getCommercialBankPartyDetails.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling getCommercialBankPartyDetails.');
    }

    if (partyId === null || partyId === undefined) {
      throw new Error('Required parameter partyId was null or undefined when calling getCommercialBankPartyDetails.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPartyResponseBody>(
      'get',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/parties/${encodeURIComponent(String(partyId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get details of all parties registered at the commercial bank.
   * Get details of all parties registered at the commercial bank.  &lt;h2&gt; Paging &lt;/h2&gt;  This endpoint can potentially return quite a large result and so you must use paging to control the size of the response.  Pagination is handled by using the &#x60;pageIndex&#x60; and &#x60;pageSize&#x60; parameters.  - The &#x60;pageIndex&#x60; refers to the index of the page of data you want returned. It is 0-indexed meaning the first page will always have the &#x60;pageIndex&#x60; value of 0.  - The &#x60;pageSize&#x60; refers to the maximum number of entries you would like to see within a single page (hence page size).    - You cannot request a &#x60;pageSize&#x60; greater than  1000.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param pageIndex Zero-based page index (0..N) of the page you want to return.
   * @param pageSize The max. number of items (size) a page will contain.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommercialBankPartyPageDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPartyViewsPageResponseBody>;
  public getCommercialBankPartyPageDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPartyViewsPageResponseBody>>;
  public getCommercialBankPartyPageDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    pageIndex?: number,
    pageSize?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPartyViewsPageResponseBody>>;
  public getCommercialBankPartyPageDetails(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    pageIndex?: number,
    pageSize?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling getCommercialBankPartyPageDetails.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling getCommercialBankPartyPageDetails.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling getCommercialBankPartyPageDetails.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPartyViewsPageResponseBody>(
      'get',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/parties`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Open an account at the commercial bank.
   * Open an account at the commercial bank. You need to provide a reference to the ID of the party which is opening the account in the request body.
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public openCommercialBankAccount(
    body: OpenAccountRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<OpenAccountResponseBody>;
  public openCommercialBankAccount(
    body: OpenAccountRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<OpenAccountResponseBody>>;
  public openCommercialBankAccount(
    body: OpenAccountRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<OpenAccountResponseBody>>;
  public openCommercialBankAccount(
    body: OpenAccountRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling openCommercialBankAccount.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling openCommercialBankAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling openCommercialBankAccount.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling openCommercialBankAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<OpenAccountResponseBody>(
      'post',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/accounts`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Register a party with the commercial bank.
   * Register a party with the commercial bank.  Once registered you can then open accounts belonging to that party. In the real world the registration would also include performing KYC and AML checks.
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public registerCommercialBankParty(
    body: RegisterPartyRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<RegisterPartyResponseBody>;
  public registerCommercialBankParty(
    body: RegisterPartyRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<RegisterPartyResponseBody>>;
  public registerCommercialBankParty(
    body: RegisterPartyRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<RegisterPartyResponseBody>>;
  public registerCommercialBankParty(
    body: RegisterPartyRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling registerCommercialBankParty.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling registerCommercialBankParty.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling registerCommercialBankParty.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling registerCommercialBankParty.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<RegisterPartyResponseBody>(
      'post',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/parties`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Terminate a commercial bank.
   * Terminate a commercial bank entity. Note: all child resources (parties/accounts) must be terminated as well otherwise this API call will fail.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public terminateCommercialBank(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetCommercialBankDetailsResponseBody>;
  public terminateCommercialBank(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetCommercialBankDetailsResponseBody>>;
  public terminateCommercialBank(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetCommercialBankDetailsResponseBody>>;
  public terminateCommercialBank(
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling terminateCommercialBank.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling terminateCommercialBank.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling terminateCommercialBank.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetCommercialBankDetailsResponseBody>(
      'delete',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Withdraw a cash amount from the account.
   * Simulation of withdrawing money from the account.  &lt;h2&gt; Amount details &lt;/h2&gt;  The amount must be given in the units of the currency (for GBP that means pence, for  USD/EUR: cents, etc.).  For example if you wanted £1/$1/€1 to be the amount you would give the value 100 (as the value refers to the amount of pence/cents).
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param bankId
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public withdrawFromCommercialBankAccount(
    body: MakeWithdrawalRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public withdrawFromCommercialBankAccount(
    body: MakeWithdrawalRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public withdrawFromCommercialBankAccount(
    body: MakeWithdrawalRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public withdrawFromCommercialBankAccount(
    body: MakeWithdrawalRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    bankId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling withdrawFromCommercialBankAccount.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling withdrawFromCommercialBankAccount.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling withdrawFromCommercialBankAccount.');
    }

    if (bankId === null || bankId === undefined) {
      throw new Error('Required parameter bankId was null or undefined when calling withdrawFromCommercialBankAccount.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling withdrawFromCommercialBankAccount.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'post',
      `${this.basePath}/commercial-banks/${encodeURIComponent(String(bankId))}/accounts/${encodeURIComponent(
        String(accountId)
      )}/withdrawal`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
