/**
 * Barclays 2022 CBDC Hackathon API
 * API for the Barclays 2022 CBDC Hackathon.  Please ensure you include your API key in the `x-api-key` header for your requests.
 *
 * OpenAPI spec version: 0.0.9
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { BadRequestResponse } from '../model/badRequestResponse';
import { CreateAccountAccessConsentResponseBody } from '../model/createAccountAccessConsentResponseBody';
import { ErrorResponseBody } from '../model/errorResponseBody';
import { GetAccountAccessConsentResponseBody } from '../model/getAccountAccessConsentResponseBody';
import { GetBankingEntityAccountResponseBody } from '../model/getBankingEntityAccountResponseBody';
import { GetPartyResponseBody } from '../model/getPartyResponseBody';
import { NotFoundResponse } from '../model/notFoundResponse';
import { OpenBankingAccountAccessConsentCreationRequestBody } from '../model/openBankingAccountAccessConsentCreationRequestBody';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class OBAISPService {
  protected basePath = 'https://cbdchackathon-dev.barclays.nayaone.com/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Grant consent to a banking entity to access account data.
   * Simulates the action of a party granting consent to a banking entity to access its account data.  See the API documentation for a full description of the different actors involved with the open banking APIs.
   * @param body
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public obCreateAccountAccessConsent(
    body: OpenBankingAccountAccessConsentCreationRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<CreateAccountAccessConsentResponseBody>;
  public obCreateAccountAccessConsent(
    body: OpenBankingAccountAccessConsentCreationRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<CreateAccountAccessConsentResponseBody>>;
  public obCreateAccountAccessConsent(
    body: OpenBankingAccountAccessConsentCreationRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<CreateAccountAccessConsentResponseBody>>;
  public obCreateAccountAccessConsent(
    body: OpenBankingAccountAccessConsentCreationRequestBody,
    xEnvId: number,
    xCurrencyId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling obCreateAccountAccessConsent.');
    }

    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling obCreateAccountAccessConsent.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling obCreateAccountAccessConsent.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<CreateAccountAccessConsentResponseBody>(
      'post',
      `${this.basePath}/open-banking/aisp/account-access-consents`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get the state of a consent.
   * Retrieve the latest state of a specific consent resource.  See the API documentation for a full description of the different actors involved with the open banking APIs.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param xRequestingBankingEntityId Identifier for the banking entity (commercial bank/pip) which you are simulating is making this API call. This is the banking entity which needs to have been granted consent from the party.
   * @param consentId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public obGetAccountAccessConsent(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    consentId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetAccountAccessConsentResponseBody>;
  public obGetAccountAccessConsent(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    consentId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetAccountAccessConsentResponseBody>>;
  public obGetAccountAccessConsent(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    consentId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetAccountAccessConsentResponseBody>>;
  public obGetAccountAccessConsent(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    consentId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling obGetAccountAccessConsent.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling obGetAccountAccessConsent.');
    }

    if (xRequestingBankingEntityId === null || xRequestingBankingEntityId === undefined) {
      throw new Error('Required parameter xRequestingBankingEntityId was null or undefined when calling obGetAccountAccessConsent.');
    }

    if (consentId === null || consentId === undefined) {
      throw new Error('Required parameter consentId was null or undefined when calling obGetAccountAccessConsent.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }
    if (xRequestingBankingEntityId !== undefined && xRequestingBankingEntityId !== null) {
      headers = headers.set('x-requesting-banking-entity-id', String(xRequestingBankingEntityId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetAccountAccessConsentResponseBody>(
      'get',
      `${this.basePath}/open-banking/aisp/account-access-consents/${encodeURIComponent(String(consentId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get account details.
   * Retrieve details for the account for which consent was granted.  See the API documentation for a full description of the different actors involved with the open banking APIs.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param xRequestingBankingEntityId Identifier for the banking entity (commercial bank/pip) which you are simulating is making this API call. This is the banking entity which needs to have been granted consent from the party.
   * @param xConsentId Identifier for the consent resource which grants access to perform this request.
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public obGetAccountDetails(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    xConsentId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetBankingEntityAccountResponseBody>;
  public obGetAccountDetails(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    xConsentId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetBankingEntityAccountResponseBody>>;
  public obGetAccountDetails(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    xConsentId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetBankingEntityAccountResponseBody>>;
  public obGetAccountDetails(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    xConsentId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling obGetAccountDetails.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling obGetAccountDetails.');
    }

    if (xRequestingBankingEntityId === null || xRequestingBankingEntityId === undefined) {
      throw new Error('Required parameter xRequestingBankingEntityId was null or undefined when calling obGetAccountDetails.');
    }

    if (xConsentId === null || xConsentId === undefined) {
      throw new Error('Required parameter xConsentId was null or undefined when calling obGetAccountDetails.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling obGetAccountDetails.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }
    if (xRequestingBankingEntityId !== undefined && xRequestingBankingEntityId !== null) {
      headers = headers.set('x-requesting-banking-entity-id', String(xRequestingBankingEntityId));
    }
    if (xConsentId !== undefined && xConsentId !== null) {
      headers = headers.set('x-consent-id', String(xConsentId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetBankingEntityAccountResponseBody>(
      'get',
      `${this.basePath}/open-banking/aisp/accounts/${encodeURIComponent(String(accountId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get party details.
   * Retrieve details about the party which owns the account and has granted consent to access their data.  See the API documentation for a full description of the different actors involved with the open banking APIs.
   * @param xEnvId Identifier for the environment.
   * @param xCurrencyId Identifier for the currency.
   * @param xRequestingBankingEntityId Identifier for the banking entity (commercial bank/pip) which you are simulating is making this API call. This is the banking entity which needs to have been granted consent from the party.
   * @param xConsentId Identifier for the consent resource which grants access to perform this request.
   * @param accountId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public obGetPartyDetails(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    xConsentId: number,
    accountId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetPartyResponseBody>;
  public obGetPartyDetails(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    xConsentId: number,
    accountId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetPartyResponseBody>>;
  public obGetPartyDetails(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    xConsentId: number,
    accountId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetPartyResponseBody>>;
  public obGetPartyDetails(
    xEnvId: number,
    xCurrencyId: number,
    xRequestingBankingEntityId: number,
    xConsentId: number,
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (xEnvId === null || xEnvId === undefined) {
      throw new Error('Required parameter xEnvId was null or undefined when calling obGetPartyDetails.');
    }

    if (xCurrencyId === null || xCurrencyId === undefined) {
      throw new Error('Required parameter xCurrencyId was null or undefined when calling obGetPartyDetails.');
    }

    if (xRequestingBankingEntityId === null || xRequestingBankingEntityId === undefined) {
      throw new Error('Required parameter xRequestingBankingEntityId was null or undefined when calling obGetPartyDetails.');
    }

    if (xConsentId === null || xConsentId === undefined) {
      throw new Error('Required parameter xConsentId was null or undefined when calling obGetPartyDetails.');
    }

    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling obGetPartyDetails.');
    }

    let headers = this.defaultHeaders;
    if (xEnvId !== undefined && xEnvId !== null) {
      headers = headers.set('x-env-id', String(xEnvId));
    }
    if (xCurrencyId !== undefined && xCurrencyId !== null) {
      headers = headers.set('x-currency-id', String(xCurrencyId));
    }
    if (xRequestingBankingEntityId !== undefined && xRequestingBankingEntityId !== null) {
      headers = headers.set('x-requesting-banking-entity-id', String(xRequestingBankingEntityId));
    }
    if (xConsentId !== undefined && xConsentId !== null) {
      headers = headers.set('x-consent-id', String(xConsentId));
    }

    // authentication (x-api-key) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['x-api-key']) {
      headers = headers.set('x-api-key', this.configuration.apiKeys['x-api-key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetPartyResponseBody>(
      'get',
      `${this.basePath}/open-banking/aisp/accounts/${encodeURIComponent(String(accountId))}/party`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
